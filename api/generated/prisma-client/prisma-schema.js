module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateForm {
  count: Int!
}

type AggregateLogo {
  count: Int!
}

type AggregateSubmission {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Form {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  logos(where: LogoWhereInput, orderBy: LogoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Logo!]
  submissions(where: SubmissionWhereInput, orderBy: SubmissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Submission!]
}

type FormConnection {
  pageInfo: PageInfo!
  edges: [FormEdge]!
  aggregate: AggregateForm!
}

input FormCreateInput {
  id: ID
  name: String!
  user: UserCreateOneWithoutFormsInput
  logos: LogoCreateManyWithoutFormInput
  submissions: SubmissionCreateManyWithoutFormInput
}

input FormCreateManyWithoutUserInput {
  create: [FormCreateWithoutUserInput!]
  connect: [FormWhereUniqueInput!]
}

input FormCreateOneWithoutLogosInput {
  create: FormCreateWithoutLogosInput
  connect: FormWhereUniqueInput
}

input FormCreateOneWithoutSubmissionsInput {
  create: FormCreateWithoutSubmissionsInput
  connect: FormWhereUniqueInput
}

input FormCreateWithoutLogosInput {
  id: ID
  name: String!
  user: UserCreateOneWithoutFormsInput
  submissions: SubmissionCreateManyWithoutFormInput
}

input FormCreateWithoutSubmissionsInput {
  id: ID
  name: String!
  user: UserCreateOneWithoutFormsInput
  logos: LogoCreateManyWithoutFormInput
}

input FormCreateWithoutUserInput {
  id: ID
  name: String!
  logos: LogoCreateManyWithoutFormInput
  submissions: SubmissionCreateManyWithoutFormInput
}

type FormEdge {
  node: Form!
  cursor: String!
}

enum FormOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FormPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FormScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FormScalarWhereInput!]
  OR: [FormScalarWhereInput!]
  NOT: [FormScalarWhereInput!]
}

type FormSubscriptionPayload {
  mutation: MutationType!
  node: Form
  updatedFields: [String!]
  previousValues: FormPreviousValues
}

input FormSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FormWhereInput
  AND: [FormSubscriptionWhereInput!]
  OR: [FormSubscriptionWhereInput!]
  NOT: [FormSubscriptionWhereInput!]
}

input FormUpdateInput {
  name: String
  user: UserUpdateOneWithoutFormsInput
  logos: LogoUpdateManyWithoutFormInput
  submissions: SubmissionUpdateManyWithoutFormInput
}

input FormUpdateManyDataInput {
  name: String
}

input FormUpdateManyMutationInput {
  name: String
}

input FormUpdateManyWithoutUserInput {
  create: [FormCreateWithoutUserInput!]
  delete: [FormWhereUniqueInput!]
  connect: [FormWhereUniqueInput!]
  set: [FormWhereUniqueInput!]
  disconnect: [FormWhereUniqueInput!]
  update: [FormUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [FormUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [FormScalarWhereInput!]
  updateMany: [FormUpdateManyWithWhereNestedInput!]
}

input FormUpdateManyWithWhereNestedInput {
  where: FormScalarWhereInput!
  data: FormUpdateManyDataInput!
}

input FormUpdateOneRequiredWithoutSubmissionsInput {
  create: FormCreateWithoutSubmissionsInput
  update: FormUpdateWithoutSubmissionsDataInput
  upsert: FormUpsertWithoutSubmissionsInput
  connect: FormWhereUniqueInput
}

input FormUpdateOneWithoutLogosInput {
  create: FormCreateWithoutLogosInput
  update: FormUpdateWithoutLogosDataInput
  upsert: FormUpsertWithoutLogosInput
  delete: Boolean
  disconnect: Boolean
  connect: FormWhereUniqueInput
}

input FormUpdateWithoutLogosDataInput {
  name: String
  user: UserUpdateOneWithoutFormsInput
  submissions: SubmissionUpdateManyWithoutFormInput
}

input FormUpdateWithoutSubmissionsDataInput {
  name: String
  user: UserUpdateOneWithoutFormsInput
  logos: LogoUpdateManyWithoutFormInput
}

input FormUpdateWithoutUserDataInput {
  name: String
  logos: LogoUpdateManyWithoutFormInput
  submissions: SubmissionUpdateManyWithoutFormInput
}

input FormUpdateWithWhereUniqueWithoutUserInput {
  where: FormWhereUniqueInput!
  data: FormUpdateWithoutUserDataInput!
}

input FormUpsertWithoutLogosInput {
  update: FormUpdateWithoutLogosDataInput!
  create: FormCreateWithoutLogosInput!
}

input FormUpsertWithoutSubmissionsInput {
  update: FormUpdateWithoutSubmissionsDataInput!
  create: FormCreateWithoutSubmissionsInput!
}

input FormUpsertWithWhereUniqueWithoutUserInput {
  where: FormWhereUniqueInput!
  update: FormUpdateWithoutUserDataInput!
  create: FormCreateWithoutUserInput!
}

input FormWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  logos_every: LogoWhereInput
  logos_some: LogoWhereInput
  logos_none: LogoWhereInput
  submissions_every: SubmissionWhereInput
  submissions_some: SubmissionWhereInput
  submissions_none: SubmissionWhereInput
  AND: [FormWhereInput!]
  OR: [FormWhereInput!]
  NOT: [FormWhereInput!]
}

input FormWhereUniqueInput {
  id: ID
}

type Logo {
  id: ID!
  assetId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  form: Form
}

type LogoConnection {
  pageInfo: PageInfo!
  edges: [LogoEdge]!
  aggregate: AggregateLogo!
}

input LogoCreateInput {
  id: ID
  assetId: String!
  form: FormCreateOneWithoutLogosInput
}

input LogoCreateManyInput {
  create: [LogoCreateInput!]
  connect: [LogoWhereUniqueInput!]
}

input LogoCreateManyWithoutFormInput {
  create: [LogoCreateWithoutFormInput!]
  connect: [LogoWhereUniqueInput!]
}

input LogoCreateWithoutFormInput {
  id: ID
  assetId: String!
}

type LogoEdge {
  node: Logo!
  cursor: String!
}

enum LogoOrderByInput {
  id_ASC
  id_DESC
  assetId_ASC
  assetId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LogoPreviousValues {
  id: ID!
  assetId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input LogoScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  assetId: String
  assetId_not: String
  assetId_in: [String!]
  assetId_not_in: [String!]
  assetId_lt: String
  assetId_lte: String
  assetId_gt: String
  assetId_gte: String
  assetId_contains: String
  assetId_not_contains: String
  assetId_starts_with: String
  assetId_not_starts_with: String
  assetId_ends_with: String
  assetId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LogoScalarWhereInput!]
  OR: [LogoScalarWhereInput!]
  NOT: [LogoScalarWhereInput!]
}

type LogoSubscriptionPayload {
  mutation: MutationType!
  node: Logo
  updatedFields: [String!]
  previousValues: LogoPreviousValues
}

input LogoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LogoWhereInput
  AND: [LogoSubscriptionWhereInput!]
  OR: [LogoSubscriptionWhereInput!]
  NOT: [LogoSubscriptionWhereInput!]
}

input LogoUpdateDataInput {
  assetId: String
  form: FormUpdateOneWithoutLogosInput
}

input LogoUpdateInput {
  assetId: String
  form: FormUpdateOneWithoutLogosInput
}

input LogoUpdateManyDataInput {
  assetId: String
}

input LogoUpdateManyInput {
  create: [LogoCreateInput!]
  update: [LogoUpdateWithWhereUniqueNestedInput!]
  upsert: [LogoUpsertWithWhereUniqueNestedInput!]
  delete: [LogoWhereUniqueInput!]
  connect: [LogoWhereUniqueInput!]
  set: [LogoWhereUniqueInput!]
  disconnect: [LogoWhereUniqueInput!]
  deleteMany: [LogoScalarWhereInput!]
  updateMany: [LogoUpdateManyWithWhereNestedInput!]
}

input LogoUpdateManyMutationInput {
  assetId: String
}

input LogoUpdateManyWithoutFormInput {
  create: [LogoCreateWithoutFormInput!]
  delete: [LogoWhereUniqueInput!]
  connect: [LogoWhereUniqueInput!]
  set: [LogoWhereUniqueInput!]
  disconnect: [LogoWhereUniqueInput!]
  update: [LogoUpdateWithWhereUniqueWithoutFormInput!]
  upsert: [LogoUpsertWithWhereUniqueWithoutFormInput!]
  deleteMany: [LogoScalarWhereInput!]
  updateMany: [LogoUpdateManyWithWhereNestedInput!]
}

input LogoUpdateManyWithWhereNestedInput {
  where: LogoScalarWhereInput!
  data: LogoUpdateManyDataInput!
}

input LogoUpdateWithoutFormDataInput {
  assetId: String
}

input LogoUpdateWithWhereUniqueNestedInput {
  where: LogoWhereUniqueInput!
  data: LogoUpdateDataInput!
}

input LogoUpdateWithWhereUniqueWithoutFormInput {
  where: LogoWhereUniqueInput!
  data: LogoUpdateWithoutFormDataInput!
}

input LogoUpsertWithWhereUniqueNestedInput {
  where: LogoWhereUniqueInput!
  update: LogoUpdateDataInput!
  create: LogoCreateInput!
}

input LogoUpsertWithWhereUniqueWithoutFormInput {
  where: LogoWhereUniqueInput!
  update: LogoUpdateWithoutFormDataInput!
  create: LogoCreateWithoutFormInput!
}

input LogoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  assetId: String
  assetId_not: String
  assetId_in: [String!]
  assetId_not_in: [String!]
  assetId_lt: String
  assetId_lte: String
  assetId_gt: String
  assetId_gte: String
  assetId_contains: String
  assetId_not_contains: String
  assetId_starts_with: String
  assetId_not_starts_with: String
  assetId_ends_with: String
  assetId_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  form: FormWhereInput
  AND: [LogoWhereInput!]
  OR: [LogoWhereInput!]
  NOT: [LogoWhereInput!]
}

input LogoWhereUniqueInput {
  id: ID
  assetId: String
}

scalar Long

type Mutation {
  createForm(data: FormCreateInput!): Form!
  updateForm(data: FormUpdateInput!, where: FormWhereUniqueInput!): Form
  updateManyForms(data: FormUpdateManyMutationInput!, where: FormWhereInput): BatchPayload!
  upsertForm(where: FormWhereUniqueInput!, create: FormCreateInput!, update: FormUpdateInput!): Form!
  deleteForm(where: FormWhereUniqueInput!): Form
  deleteManyForms(where: FormWhereInput): BatchPayload!
  createLogo(data: LogoCreateInput!): Logo!
  updateLogo(data: LogoUpdateInput!, where: LogoWhereUniqueInput!): Logo
  updateManyLogoes(data: LogoUpdateManyMutationInput!, where: LogoWhereInput): BatchPayload!
  upsertLogo(where: LogoWhereUniqueInput!, create: LogoCreateInput!, update: LogoUpdateInput!): Logo!
  deleteLogo(where: LogoWhereUniqueInput!): Logo
  deleteManyLogoes(where: LogoWhereInput): BatchPayload!
  createSubmission(data: SubmissionCreateInput!): Submission!
  updateSubmission(data: SubmissionUpdateInput!, where: SubmissionWhereUniqueInput!): Submission
  updateManySubmissions(data: SubmissionUpdateManyMutationInput!, where: SubmissionWhereInput): BatchPayload!
  upsertSubmission(where: SubmissionWhereUniqueInput!, create: SubmissionCreateInput!, update: SubmissionUpdateInput!): Submission!
  deleteSubmission(where: SubmissionWhereUniqueInput!): Submission
  deleteManySubmissions(where: SubmissionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  form(where: FormWhereUniqueInput!): Form
  forms(where: FormWhereInput, orderBy: FormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Form]!
  formsConnection(where: FormWhereInput, orderBy: FormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FormConnection!
  logo(where: LogoWhereUniqueInput!): Logo
  logoes(where: LogoWhereInput, orderBy: LogoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Logo]!
  logoesConnection(where: LogoWhereInput, orderBy: LogoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogoConnection!
  submission(where: SubmissionWhereUniqueInput!): Submission
  submissions(where: SubmissionWhereInput, orderBy: SubmissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Submission]!
  submissionsConnection(where: SubmissionWhereInput, orderBy: SubmissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubmissionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Submission {
  id: ID!
  name: String!
  logos(where: LogoWhereInput, orderBy: LogoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Logo!]
  createdAt: DateTime!
  updatedAt: DateTime!
  form: Form!
}

type SubmissionConnection {
  pageInfo: PageInfo!
  edges: [SubmissionEdge]!
  aggregate: AggregateSubmission!
}

input SubmissionCreateInput {
  id: ID
  name: String!
  logos: LogoCreateManyInput
  form: FormCreateOneWithoutSubmissionsInput!
}

input SubmissionCreateManyWithoutFormInput {
  create: [SubmissionCreateWithoutFormInput!]
  connect: [SubmissionWhereUniqueInput!]
}

input SubmissionCreateWithoutFormInput {
  id: ID
  name: String!
  logos: LogoCreateManyInput
}

type SubmissionEdge {
  node: Submission!
  cursor: String!
}

enum SubmissionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SubmissionPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input SubmissionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [SubmissionScalarWhereInput!]
  OR: [SubmissionScalarWhereInput!]
  NOT: [SubmissionScalarWhereInput!]
}

type SubmissionSubscriptionPayload {
  mutation: MutationType!
  node: Submission
  updatedFields: [String!]
  previousValues: SubmissionPreviousValues
}

input SubmissionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SubmissionWhereInput
  AND: [SubmissionSubscriptionWhereInput!]
  OR: [SubmissionSubscriptionWhereInput!]
  NOT: [SubmissionSubscriptionWhereInput!]
}

input SubmissionUpdateInput {
  name: String
  logos: LogoUpdateManyInput
  form: FormUpdateOneRequiredWithoutSubmissionsInput
}

input SubmissionUpdateManyDataInput {
  name: String
}

input SubmissionUpdateManyMutationInput {
  name: String
}

input SubmissionUpdateManyWithoutFormInput {
  create: [SubmissionCreateWithoutFormInput!]
  delete: [SubmissionWhereUniqueInput!]
  connect: [SubmissionWhereUniqueInput!]
  set: [SubmissionWhereUniqueInput!]
  disconnect: [SubmissionWhereUniqueInput!]
  update: [SubmissionUpdateWithWhereUniqueWithoutFormInput!]
  upsert: [SubmissionUpsertWithWhereUniqueWithoutFormInput!]
  deleteMany: [SubmissionScalarWhereInput!]
  updateMany: [SubmissionUpdateManyWithWhereNestedInput!]
}

input SubmissionUpdateManyWithWhereNestedInput {
  where: SubmissionScalarWhereInput!
  data: SubmissionUpdateManyDataInput!
}

input SubmissionUpdateWithoutFormDataInput {
  name: String
  logos: LogoUpdateManyInput
}

input SubmissionUpdateWithWhereUniqueWithoutFormInput {
  where: SubmissionWhereUniqueInput!
  data: SubmissionUpdateWithoutFormDataInput!
}

input SubmissionUpsertWithWhereUniqueWithoutFormInput {
  where: SubmissionWhereUniqueInput!
  update: SubmissionUpdateWithoutFormDataInput!
  create: SubmissionCreateWithoutFormInput!
}

input SubmissionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  logos_every: LogoWhereInput
  logos_some: LogoWhereInput
  logos_none: LogoWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  form: FormWhereInput
  AND: [SubmissionWhereInput!]
  OR: [SubmissionWhereInput!]
  NOT: [SubmissionWhereInput!]
}

input SubmissionWhereUniqueInput {
  id: ID
}

type Subscription {
  form(where: FormSubscriptionWhereInput): FormSubscriptionPayload
  logo(where: LogoSubscriptionWhereInput): LogoSubscriptionPayload
  submission(where: SubmissionSubscriptionWhereInput): SubmissionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetPasswordToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
  forms(where: FormWhereInput, orderBy: FormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Form!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetPasswordToken: String
  forms: FormCreateManyWithoutUserInput
}

input UserCreateOneWithoutFormsInput {
  create: UserCreateWithoutFormsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFormsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetPasswordToken: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetPasswordToken_ASC
  resetPasswordToken_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetPasswordToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetPasswordToken: String
  forms: FormUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetPasswordToken: String
}

input UserUpdateOneWithoutFormsInput {
  create: UserCreateWithoutFormsInput
  update: UserUpdateWithoutFormsDataInput
  upsert: UserUpsertWithoutFormsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFormsDataInput {
  name: String
  email: String
  password: String
  resetPasswordToken: String
}

input UserUpsertWithoutFormsInput {
  update: UserUpdateWithoutFormsDataInput!
  create: UserCreateWithoutFormsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  resetPasswordToken: String
  resetPasswordToken_not: String
  resetPasswordToken_in: [String!]
  resetPasswordToken_not_in: [String!]
  resetPasswordToken_lt: String
  resetPasswordToken_lte: String
  resetPasswordToken_gt: String
  resetPasswordToken_gte: String
  resetPasswordToken_contains: String
  resetPasswordToken_not_contains: String
  resetPasswordToken_starts_with: String
  resetPasswordToken_not_starts_with: String
  resetPasswordToken_ends_with: String
  resetPasswordToken_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  forms_every: FormWhereInput
  forms_some: FormWhereInput
  forms_none: FormWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  resetPasswordToken: String
}
`
      }
    