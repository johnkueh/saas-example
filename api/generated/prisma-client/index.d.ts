// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  form: (where?: FormWhereInput) => Promise<boolean>;
  logo: (where?: LogoWhereInput) => Promise<boolean>;
  submission: (where?: SubmissionWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  form: (where: FormWhereUniqueInput) => FormPromise;
  forms: (
    args?: {
      where?: FormWhereInput;
      orderBy?: FormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Form>;
  formsConnection: (
    args?: {
      where?: FormWhereInput;
      orderBy?: FormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FormConnectionPromise;
  logo: (where: LogoWhereUniqueInput) => LogoPromise;
  logoes: (
    args?: {
      where?: LogoWhereInput;
      orderBy?: LogoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Logo>;
  logoesConnection: (
    args?: {
      where?: LogoWhereInput;
      orderBy?: LogoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LogoConnectionPromise;
  submission: (where: SubmissionWhereUniqueInput) => SubmissionPromise;
  submissions: (
    args?: {
      where?: SubmissionWhereInput;
      orderBy?: SubmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Submission>;
  submissionsConnection: (
    args?: {
      where?: SubmissionWhereInput;
      orderBy?: SubmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SubmissionConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createForm: (data: FormCreateInput) => FormPromise;
  updateForm: (
    args: { data: FormUpdateInput; where: FormWhereUniqueInput }
  ) => FormPromise;
  updateManyForms: (
    args: { data: FormUpdateManyMutationInput; where?: FormWhereInput }
  ) => BatchPayloadPromise;
  upsertForm: (
    args: {
      where: FormWhereUniqueInput;
      create: FormCreateInput;
      update: FormUpdateInput;
    }
  ) => FormPromise;
  deleteForm: (where: FormWhereUniqueInput) => FormPromise;
  deleteManyForms: (where?: FormWhereInput) => BatchPayloadPromise;
  createLogo: (data: LogoCreateInput) => LogoPromise;
  updateLogo: (
    args: { data: LogoUpdateInput; where: LogoWhereUniqueInput }
  ) => LogoPromise;
  updateManyLogoes: (
    args: { data: LogoUpdateManyMutationInput; where?: LogoWhereInput }
  ) => BatchPayloadPromise;
  upsertLogo: (
    args: {
      where: LogoWhereUniqueInput;
      create: LogoCreateInput;
      update: LogoUpdateInput;
    }
  ) => LogoPromise;
  deleteLogo: (where: LogoWhereUniqueInput) => LogoPromise;
  deleteManyLogoes: (where?: LogoWhereInput) => BatchPayloadPromise;
  createSubmission: (data: SubmissionCreateInput) => SubmissionPromise;
  updateSubmission: (
    args: { data: SubmissionUpdateInput; where: SubmissionWhereUniqueInput }
  ) => SubmissionPromise;
  updateManySubmissions: (
    args: {
      data: SubmissionUpdateManyMutationInput;
      where?: SubmissionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSubmission: (
    args: {
      where: SubmissionWhereUniqueInput;
      create: SubmissionCreateInput;
      update: SubmissionUpdateInput;
    }
  ) => SubmissionPromise;
  deleteSubmission: (where: SubmissionWhereUniqueInput) => SubmissionPromise;
  deleteManySubmissions: (where?: SubmissionWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  form: (
    where?: FormSubscriptionWhereInput
  ) => FormSubscriptionPayloadSubscription;
  logo: (
    where?: LogoSubscriptionWhereInput
  ) => LogoSubscriptionPayloadSubscription;
  submission: (
    where?: SubmissionSubscriptionWhereInput
  ) => SubmissionSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type FormOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LogoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "assetId_ASC"
  | "assetId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SubmissionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetPasswordToken_ASC"
  | "resetPasswordToken_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LogoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  assetId?: String;
  assetId_not?: String;
  assetId_in?: String[] | String;
  assetId_not_in?: String[] | String;
  assetId_lt?: String;
  assetId_lte?: String;
  assetId_gt?: String;
  assetId_gte?: String;
  assetId_contains?: String;
  assetId_not_contains?: String;
  assetId_starts_with?: String;
  assetId_not_starts_with?: String;
  assetId_ends_with?: String;
  assetId_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: LogoScalarWhereInput[] | LogoScalarWhereInput;
  OR?: LogoScalarWhereInput[] | LogoScalarWhereInput;
  NOT?: LogoScalarWhereInput[] | LogoScalarWhereInput;
}

export type FormWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SubmissionUpdateWithWhereUniqueWithoutFormInput {
  where: SubmissionWhereUniqueInput;
  data: SubmissionUpdateWithoutFormDataInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  resetPasswordToken?: String;
  resetPasswordToken_not?: String;
  resetPasswordToken_in?: String[] | String;
  resetPasswordToken_not_in?: String[] | String;
  resetPasswordToken_lt?: String;
  resetPasswordToken_lte?: String;
  resetPasswordToken_gt?: String;
  resetPasswordToken_gte?: String;
  resetPasswordToken_contains?: String;
  resetPasswordToken_not_contains?: String;
  resetPasswordToken_starts_with?: String;
  resetPasswordToken_not_starts_with?: String;
  resetPasswordToken_ends_with?: String;
  resetPasswordToken_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  forms_every?: FormWhereInput;
  forms_some?: FormWhereInput;
  forms_none?: FormWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface SubmissionUpdateWithoutFormDataInput {
  name?: String;
  logos?: LogoUpdateManyInput;
}

export interface SubmissionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  logos_every?: LogoWhereInput;
  logos_some?: LogoWhereInput;
  logos_none?: LogoWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  form?: FormWhereInput;
  AND?: SubmissionWhereInput[] | SubmissionWhereInput;
  OR?: SubmissionWhereInput[] | SubmissionWhereInput;
  NOT?: SubmissionWhereInput[] | SubmissionWhereInput;
}

export interface FormCreateWithoutLogosInput {
  id?: ID_Input;
  name: String;
  user?: UserCreateOneWithoutFormsInput;
  submissions?: SubmissionCreateManyWithoutFormInput;
}

export interface FormCreateOneWithoutSubmissionsInput {
  create?: FormCreateWithoutSubmissionsInput;
  connect?: FormWhereUniqueInput;
}

export interface FormUpdateInput {
  name?: String;
  user?: UserUpdateOneWithoutFormsInput;
  logos?: LogoUpdateManyWithoutFormInput;
  submissions?: SubmissionUpdateManyWithoutFormInput;
}

export interface LogoUpdateManyInput {
  create?: LogoCreateInput[] | LogoCreateInput;
  update?:
    | LogoUpdateWithWhereUniqueNestedInput[]
    | LogoUpdateWithWhereUniqueNestedInput;
  upsert?:
    | LogoUpsertWithWhereUniqueNestedInput[]
    | LogoUpsertWithWhereUniqueNestedInput;
  delete?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
  connect?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
  set?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
  disconnect?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
  deleteMany?: LogoScalarWhereInput[] | LogoScalarWhereInput;
  updateMany?:
    | LogoUpdateManyWithWhereNestedInput[]
    | LogoUpdateManyWithWhereNestedInput;
}

export interface UserUpdateOneWithoutFormsInput {
  create?: UserCreateWithoutFormsInput;
  update?: UserUpdateWithoutFormsDataInput;
  upsert?: UserUpsertWithoutFormsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface SubmissionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SubmissionWhereInput;
  AND?: SubmissionSubscriptionWhereInput[] | SubmissionSubscriptionWhereInput;
  OR?: SubmissionSubscriptionWhereInput[] | SubmissionSubscriptionWhereInput;
  NOT?: SubmissionSubscriptionWhereInput[] | SubmissionSubscriptionWhereInput;
}

export interface UserUpdateWithoutFormsDataInput {
  name?: String;
  email?: String;
  password?: String;
  resetPasswordToken?: String;
}

export interface FormSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FormWhereInput;
  AND?: FormSubscriptionWhereInput[] | FormSubscriptionWhereInput;
  OR?: FormSubscriptionWhereInput[] | FormSubscriptionWhereInput;
  NOT?: FormSubscriptionWhereInput[] | FormSubscriptionWhereInput;
}

export interface UserUpsertWithoutFormsInput {
  update: UserUpdateWithoutFormsDataInput;
  create: UserCreateWithoutFormsInput;
}

export interface FormUpdateManyDataInput {
  name?: String;
}

export interface LogoUpdateManyWithoutFormInput {
  create?: LogoCreateWithoutFormInput[] | LogoCreateWithoutFormInput;
  delete?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
  connect?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
  set?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
  disconnect?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
  update?:
    | LogoUpdateWithWhereUniqueWithoutFormInput[]
    | LogoUpdateWithWhereUniqueWithoutFormInput;
  upsert?:
    | LogoUpsertWithWhereUniqueWithoutFormInput[]
    | LogoUpsertWithWhereUniqueWithoutFormInput;
  deleteMany?: LogoScalarWhereInput[] | LogoScalarWhereInput;
  updateMany?:
    | LogoUpdateManyWithWhereNestedInput[]
    | LogoUpdateManyWithWhereNestedInput;
}

export interface FormScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: FormScalarWhereInput[] | FormScalarWhereInput;
  OR?: FormScalarWhereInput[] | FormScalarWhereInput;
  NOT?: FormScalarWhereInput[] | FormScalarWhereInput;
}

export interface LogoUpdateWithWhereUniqueWithoutFormInput {
  where: LogoWhereUniqueInput;
  data: LogoUpdateWithoutFormDataInput;
}

export interface FormUpsertWithWhereUniqueWithoutUserInput {
  where: FormWhereUniqueInput;
  update: FormUpdateWithoutUserDataInput;
  create: FormCreateWithoutUserInput;
}

export interface LogoUpdateWithoutFormDataInput {
  assetId?: String;
}

export interface FormUpdateWithWhereUniqueWithoutUserInput {
  where: FormWhereUniqueInput;
  data: FormUpdateWithoutUserDataInput;
}

export interface LogoUpsertWithWhereUniqueWithoutFormInput {
  where: LogoWhereUniqueInput;
  update: LogoUpdateWithoutFormDataInput;
  create: LogoCreateWithoutFormInput;
}

export interface FormUpdateManyWithoutUserInput {
  create?: FormCreateWithoutUserInput[] | FormCreateWithoutUserInput;
  delete?: FormWhereUniqueInput[] | FormWhereUniqueInput;
  connect?: FormWhereUniqueInput[] | FormWhereUniqueInput;
  set?: FormWhereUniqueInput[] | FormWhereUniqueInput;
  disconnect?: FormWhereUniqueInput[] | FormWhereUniqueInput;
  update?:
    | FormUpdateWithWhereUniqueWithoutUserInput[]
    | FormUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | FormUpsertWithWhereUniqueWithoutUserInput[]
    | FormUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: FormScalarWhereInput[] | FormScalarWhereInput;
  updateMany?:
    | FormUpdateManyWithWhereNestedInput[]
    | FormUpdateManyWithWhereNestedInput;
}

export interface FormUpdateWithoutSubmissionsDataInput {
  name?: String;
  user?: UserUpdateOneWithoutFormsInput;
  logos?: LogoUpdateManyWithoutFormInput;
}

export interface FormCreateWithoutUserInput {
  id?: ID_Input;
  name: String;
  logos?: LogoCreateManyWithoutFormInput;
  submissions?: SubmissionCreateManyWithoutFormInput;
}

export interface LogoUpdateManyWithWhereNestedInput {
  where: LogoScalarWhereInput;
  data: LogoUpdateManyDataInput;
}

export interface FormCreateManyWithoutUserInput {
  create?: FormCreateWithoutUserInput[] | FormCreateWithoutUserInput;
  connect?: FormWhereUniqueInput[] | FormWhereUniqueInput;
}

export interface LogoUpdateManyDataInput {
  assetId?: String;
}

export interface SubmissionUpdateManyMutationInput {
  name?: String;
}

export interface SubmissionUpdateManyWithoutFormInput {
  create?:
    | SubmissionCreateWithoutFormInput[]
    | SubmissionCreateWithoutFormInput;
  delete?: SubmissionWhereUniqueInput[] | SubmissionWhereUniqueInput;
  connect?: SubmissionWhereUniqueInput[] | SubmissionWhereUniqueInput;
  set?: SubmissionWhereUniqueInput[] | SubmissionWhereUniqueInput;
  disconnect?: SubmissionWhereUniqueInput[] | SubmissionWhereUniqueInput;
  update?:
    | SubmissionUpdateWithWhereUniqueWithoutFormInput[]
    | SubmissionUpdateWithWhereUniqueWithoutFormInput;
  upsert?:
    | SubmissionUpsertWithWhereUniqueWithoutFormInput[]
    | SubmissionUpsertWithWhereUniqueWithoutFormInput;
  deleteMany?: SubmissionScalarWhereInput[] | SubmissionScalarWhereInput;
  updateMany?:
    | SubmissionUpdateManyWithWhereNestedInput[]
    | SubmissionUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutFormsInput {
  create?: UserCreateWithoutFormsInput;
  connect?: UserWhereUniqueInput;
}

export interface LogoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  assetId?: String;
  assetId_not?: String;
  assetId_in?: String[] | String;
  assetId_not_in?: String[] | String;
  assetId_lt?: String;
  assetId_lte?: String;
  assetId_gt?: String;
  assetId_gte?: String;
  assetId_contains?: String;
  assetId_not_contains?: String;
  assetId_starts_with?: String;
  assetId_not_starts_with?: String;
  assetId_ends_with?: String;
  assetId_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  form?: FormWhereInput;
  AND?: LogoWhereInput[] | LogoWhereInput;
  OR?: LogoWhereInput[] | LogoWhereInput;
  NOT?: LogoWhereInput[] | LogoWhereInput;
}

export interface LogoCreateManyWithoutFormInput {
  create?: LogoCreateWithoutFormInput[] | LogoCreateWithoutFormInput;
  connect?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
}

export interface FormWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  user?: UserWhereInput;
  logos_every?: LogoWhereInput;
  logos_some?: LogoWhereInput;
  logos_none?: LogoWhereInput;
  submissions_every?: SubmissionWhereInput;
  submissions_some?: SubmissionWhereInput;
  submissions_none?: SubmissionWhereInput;
  AND?: FormWhereInput[] | FormWhereInput;
  OR?: FormWhereInput[] | FormWhereInput;
  NOT?: FormWhereInput[] | FormWhereInput;
}

export interface SubmissionCreateManyWithoutFormInput {
  create?:
    | SubmissionCreateWithoutFormInput[]
    | SubmissionCreateWithoutFormInput;
  connect?: SubmissionWhereUniqueInput[] | SubmissionWhereUniqueInput;
}

export interface FormUpdateOneRequiredWithoutSubmissionsInput {
  create?: FormCreateWithoutSubmissionsInput;
  update?: FormUpdateWithoutSubmissionsDataInput;
  upsert?: FormUpsertWithoutSubmissionsInput;
  connect?: FormWhereUniqueInput;
}

export interface LogoCreateManyInput {
  create?: LogoCreateInput[] | LogoCreateInput;
  connect?: LogoWhereUniqueInput[] | LogoWhereUniqueInput;
}

export interface LogoUpdateWithWhereUniqueNestedInput {
  where: LogoWhereUniqueInput;
  data: LogoUpdateDataInput;
}

export interface FormCreateOneWithoutLogosInput {
  create?: FormCreateWithoutLogosInput;
  connect?: FormWhereUniqueInput;
}

export interface LogoUpdateDataInput {
  assetId?: String;
  form?: FormUpdateOneWithoutLogosInput;
}

export interface LogoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LogoWhereInput;
  AND?: LogoSubscriptionWhereInput[] | LogoSubscriptionWhereInput;
  OR?: LogoSubscriptionWhereInput[] | LogoSubscriptionWhereInput;
  NOT?: LogoSubscriptionWhereInput[] | LogoSubscriptionWhereInput;
}

export interface FormUpdateOneWithoutLogosInput {
  create?: FormCreateWithoutLogosInput;
  update?: FormUpdateWithoutLogosDataInput;
  upsert?: FormUpsertWithoutLogosInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FormWhereUniqueInput;
}

export interface FormUpdateManyWithWhereNestedInput {
  where: FormScalarWhereInput;
  data: FormUpdateManyDataInput;
}

export interface FormUpdateWithoutLogosDataInput {
  name?: String;
  user?: UserUpdateOneWithoutFormsInput;
  submissions?: SubmissionUpdateManyWithoutFormInput;
}

export interface FormUpdateWithoutUserDataInput {
  name?: String;
  logos?: LogoUpdateManyWithoutFormInput;
  submissions?: SubmissionUpdateManyWithoutFormInput;
}

export interface FormUpsertWithoutLogosInput {
  update: FormUpdateWithoutLogosDataInput;
  create: FormCreateWithoutLogosInput;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
  password?: String;
  resetPasswordToken?: String;
  forms?: FormUpdateManyWithoutUserInput;
}

export interface LogoUpsertWithWhereUniqueNestedInput {
  where: LogoWhereUniqueInput;
  update: LogoUpdateDataInput;
  create: LogoCreateInput;
}

export interface UserCreateInput {
  id?: ID_Input;
  name: String;
  email: String;
  password: String;
  resetPasswordToken?: String;
  forms?: FormCreateManyWithoutUserInput;
}

export interface SubmissionUpsertWithWhereUniqueWithoutFormInput {
  where: SubmissionWhereUniqueInput;
  update: SubmissionUpdateWithoutFormDataInput;
  create: SubmissionCreateWithoutFormInput;
}

export interface FormCreateInput {
  id?: ID_Input;
  name: String;
  user?: UserCreateOneWithoutFormsInput;
  logos?: LogoCreateManyWithoutFormInput;
  submissions?: SubmissionCreateManyWithoutFormInput;
}

export interface SubmissionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: SubmissionScalarWhereInput[] | SubmissionScalarWhereInput;
  OR?: SubmissionScalarWhereInput[] | SubmissionScalarWhereInput;
  NOT?: SubmissionScalarWhereInput[] | SubmissionScalarWhereInput;
}

export interface LogoCreateWithoutFormInput {
  id?: ID_Input;
  assetId: String;
}

export interface SubmissionUpdateManyWithWhereNestedInput {
  where: SubmissionScalarWhereInput;
  data: SubmissionUpdateManyDataInput;
}

export interface LogoCreateInput {
  id?: ID_Input;
  assetId: String;
  form?: FormCreateOneWithoutLogosInput;
}

export interface SubmissionUpdateManyDataInput {
  name?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  email?: String;
  password?: String;
  resetPasswordToken?: String;
}

export interface FormUpdateManyMutationInput {
  name?: String;
}

export type SubmissionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface SubmissionUpdateInput {
  name?: String;
  logos?: LogoUpdateManyInput;
  form?: FormUpdateOneRequiredWithoutSubmissionsInput;
}

export interface FormUpsertWithoutSubmissionsInput {
  update: FormUpdateWithoutSubmissionsDataInput;
  create: FormCreateWithoutSubmissionsInput;
}

export interface SubmissionCreateInput {
  id?: ID_Input;
  name: String;
  logos?: LogoCreateManyInput;
  form: FormCreateOneWithoutSubmissionsInput;
}

export interface LogoUpdateManyMutationInput {
  assetId?: String;
}

export interface LogoUpdateInput {
  assetId?: String;
  form?: FormUpdateOneWithoutLogosInput;
}

export interface FormCreateWithoutSubmissionsInput {
  id?: ID_Input;
  name: String;
  user?: UserCreateOneWithoutFormsInput;
  logos?: LogoCreateManyWithoutFormInput;
}

export interface UserCreateWithoutFormsInput {
  id?: ID_Input;
  name: String;
  email: String;
  password: String;
  resetPasswordToken?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  resetPasswordToken?: String;
}>;

export type LogoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  assetId?: String;
}>;

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface SubmissionCreateWithoutFormInput {
  id?: ID_Input;
  name: String;
  logos?: LogoCreateManyInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetPasswordToken?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetPasswordToken: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetPasswordToken: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LogoConnection {
  pageInfo: PageInfo;
  edges: LogoEdge[];
}

export interface LogoConnectionPromise
  extends Promise<LogoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LogoEdge>>() => T;
  aggregate: <T = AggregateLogoPromise>() => T;
}

export interface LogoConnectionSubscription
  extends Promise<AsyncIterator<LogoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LogoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLogoSubscription>() => T;
}

export interface SubmissionSubscriptionPayload {
  mutation: MutationType;
  node: Submission;
  updatedFields: String[];
  previousValues: SubmissionPreviousValues;
}

export interface SubmissionSubscriptionPayloadPromise
  extends Promise<SubmissionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubmissionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubmissionPreviousValuesPromise>() => T;
}

export interface SubmissionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubmissionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubmissionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubmissionPreviousValuesSubscription>() => T;
}

export interface AggregateForm {
  count: Int;
}

export interface AggregateFormPromise
  extends Promise<AggregateForm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFormSubscription
  extends Promise<AsyncIterator<AggregateForm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FormEdge {
  node: Form;
  cursor: String;
}

export interface FormEdgePromise extends Promise<FormEdge>, Fragmentable {
  node: <T = FormPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FormEdgeSubscription
  extends Promise<AsyncIterator<FormEdge>>,
    Fragmentable {
  node: <T = FormSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface SubmissionPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SubmissionPreviousValuesPromise
  extends Promise<SubmissionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface SubmissionPreviousValuesSubscription
  extends Promise<AsyncIterator<SubmissionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Logo {
  id: ID_Output;
  assetId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LogoPromise extends Promise<Logo>, Fragmentable {
  id: () => Promise<ID_Output>;
  assetId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  form: <T = FormPromise>() => T;
}

export interface LogoSubscription
  extends Promise<AsyncIterator<Logo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  assetId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  form: <T = FormSubscription>() => T;
}

export interface FormConnection {
  pageInfo: PageInfo;
  edges: FormEdge[];
}

export interface FormConnectionPromise
  extends Promise<FormConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FormEdge>>() => T;
  aggregate: <T = AggregateFormPromise>() => T;
}

export interface FormConnectionSubscription
  extends Promise<AsyncIterator<FormConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FormEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFormSubscription>() => T;
}

export interface SubmissionEdge {
  node: Submission;
  cursor: String;
}

export interface SubmissionEdgePromise
  extends Promise<SubmissionEdge>,
    Fragmentable {
  node: <T = SubmissionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubmissionEdgeSubscription
  extends Promise<AsyncIterator<SubmissionEdge>>,
    Fragmentable {
  node: <T = SubmissionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Form {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FormPromise extends Promise<Form>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  logos: <T = FragmentableArray<Logo>>(
    args?: {
      where?: LogoWhereInput;
      orderBy?: LogoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  submissions: <T = FragmentableArray<Submission>>(
    args?: {
      where?: SubmissionWhereInput;
      orderBy?: SubmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface FormSubscription
  extends Promise<AsyncIterator<Form>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  logos: <T = Promise<AsyncIterator<LogoSubscription>>>(
    args?: {
      where?: LogoWhereInput;
      orderBy?: LogoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  submissions: <T = Promise<AsyncIterator<SubmissionSubscription>>>(
    args?: {
      where?: SubmissionWhereInput;
      orderBy?: SubmissionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateLogo {
  count: Int;
}

export interface AggregateLogoPromise
  extends Promise<AggregateLogo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLogoSubscription
  extends Promise<AsyncIterator<AggregateLogo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface FormSubscriptionPayload {
  mutation: MutationType;
  node: Form;
  updatedFields: String[];
  previousValues: FormPreviousValues;
}

export interface FormSubscriptionPayloadPromise
  extends Promise<FormSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FormPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FormPreviousValuesPromise>() => T;
}

export interface FormSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FormSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FormSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FormPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  resetPasswordToken?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  resetPasswordToken: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  forms: <T = FragmentableArray<Form>>(
    args?: {
      where?: FormWhereInput;
      orderBy?: FormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  resetPasswordToken: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  forms: <T = Promise<AsyncIterator<FormSubscription>>>(
    args?: {
      where?: FormWhereInput;
      orderBy?: FormOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface LogoPreviousValues {
  id: ID_Output;
  assetId: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface LogoPreviousValuesPromise
  extends Promise<LogoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  assetId: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface LogoPreviousValuesSubscription
  extends Promise<AsyncIterator<LogoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  assetId: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LogoSubscriptionPayload {
  mutation: MutationType;
  node: Logo;
  updatedFields: String[];
  previousValues: LogoPreviousValues;
}

export interface LogoSubscriptionPayloadPromise
  extends Promise<LogoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LogoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LogoPreviousValuesPromise>() => T;
}

export interface LogoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LogoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LogoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LogoPreviousValuesSubscription>() => T;
}

export interface Submission {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface SubmissionPromise extends Promise<Submission>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  logos: <T = FragmentableArray<Logo>>(
    args?: {
      where?: LogoWhereInput;
      orderBy?: LogoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  form: <T = FormPromise>() => T;
}

export interface SubmissionSubscription
  extends Promise<AsyncIterator<Submission>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  logos: <T = Promise<AsyncIterator<LogoSubscription>>>(
    args?: {
      where?: LogoWhereInput;
      orderBy?: LogoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  form: <T = FormSubscription>() => T;
}

export interface FormPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface FormPreviousValuesPromise
  extends Promise<FormPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface FormPreviousValuesSubscription
  extends Promise<AsyncIterator<FormPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateSubmission {
  count: Int;
}

export interface AggregateSubmissionPromise
  extends Promise<AggregateSubmission>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubmissionSubscription
  extends Promise<AsyncIterator<AggregateSubmission>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LogoEdge {
  node: Logo;
  cursor: String;
}

export interface LogoEdgePromise extends Promise<LogoEdge>, Fragmentable {
  node: <T = LogoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LogoEdgeSubscription
  extends Promise<AsyncIterator<LogoEdge>>,
    Fragmentable {
  node: <T = LogoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SubmissionConnection {
  pageInfo: PageInfo;
  edges: SubmissionEdge[];
}

export interface SubmissionConnectionPromise
  extends Promise<SubmissionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubmissionEdge>>() => T;
  aggregate: <T = AggregateSubmissionPromise>() => T;
}

export interface SubmissionConnectionSubscription
  extends Promise<AsyncIterator<SubmissionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubmissionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubmissionSubscription>() => T;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Form",
    embedded: false
  },
  {
    name: "Submission",
    embedded: false
  },
  {
    name: "Logo",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
